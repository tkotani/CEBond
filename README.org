# -*- Mode: org ; Coding: utf-8-unix -*-
#+TITLE: Bond-Length Analyzer based on Chemenv
#+AUTHOR: Motonari Sawada, Ryoga Iwamoto, and Takao Kotani 
#+email: takaokotani@gmail.com
#+LANGUAGE: en
#+STARTUP: showall
#+OPTIONS: \n:t

* Overview
This software CEBond for reproducing results of our paper xxx.
CEBond is open and free for modification and redistribution
as long as you respect what we did in your own manner.

All results and intermediate files are ".dat .png .svg .log ./COD/*/*.cif ./neighbour_*/*.dat". 
These are included in this package. *.log are just log files for check, 
not read by other commands.

To obtain results (to generate these files) in the paper,
run following five bash scripts one by one.
| ./job_download         | Get cif files from Crystal Open Database (COD)   |
| ./job_CifFilter        | Select cif files which are used for our analysis |
| ./job_APfig            | Make histogram Fig.1                             |
| ./job_chemenv_analysis | Apply Chemenv analysis to cif files.             |
| ./job_histA            | Make histograms for Fig.2,3,4                    |
| ./job_histB            | Make histograms for Fig.5                        |
We can skip any scripts because intermediate files 
are already in this package.

* Prerequisite 
We need python3, matplotlib, numpy, seaborn, bash, mysql(job_download), 
gfortran, and pymatgen. Our current setting ('>pip list','>apt list --installed') is

| matplotlib             3.1.2                  |
| numpy                  1.17.4                 |
| pymatgen               2020.1.28              |
| seaborn                0.10.0                 |
| gfortran/focal,now 4:9.3.0-1ubuntu2 amd64     |
| mysql-common/focal,focal,now 5.8+1.0.5ubuntu2 |

gfortran is just for compiling a fortran code neib.F (a.out is generated by 'gfortran neib.F). 
This is used for generating neighbour lists for the bond valence sum procedure at ./job_histB.
The a.out included in this package may work; then it is not nessesary to run gfortran.
(Check a.out: If '>echo aaa|./a.out' shows "aaa_inp.dat: no such file", it works.)

Shanon's IR/CR (ionic radius, crystal radius) are given at [[./shannon1976radius]]. 
We take the IR/CR from https://yseto.net/?page_id=67.


* Download cif files from COD 
>./job_download

This step can be skipped since we already have cif files in 
COD/O/*.cif, COD/N/*.cif, COD/F/*.cif. 
Look into ./job_download. 
This bash script downloads cif files from Crystal Open database(COD).
In this script, [[./pickup-COD-structures_O.sql]] is used for SQL query to COD.
Results of this query is in ListDownloadCif_O.dat, N and F as well,
where we have cif numbers, chemical formulas and sub version id's.
Then job_download calls DownloadCif.py to download cif files 
at ./COD/O/*.cif. At 2022-03-25, the number of downloaded files are 
|   | # of Downloaded Cif | Stored in     |
|---+---------------------+---------------|
| N |                 674 | ./COD/N/*.cif |
| F |                1415 | ./COD/F/*.cif |
| O |               16131 | ./COD/O/*.cif |
These are the line numbers of ListDownloadCif_O.dat and so on.

pickup-COD-structures_*.sql are for getting lists of cifs
satisfing conditions in our paper.
We futher filter the lists in the following CifFilter.


* CifFilter
>./job_CifFilter

Look into job_CifFilter; this performs 'CifFilter.py O', ...
Then we get a list of cif files, list_O.dat, list_F.dat, and list_N.dat,
whose number of lines show the number of selected files.
The CifFilter.py throw away following cif files
1. Pymatgen structure  
   Structure is recognized by pymatgen (pymatgen.Structure.from_file do not show error).
2. Occupancy check
   Each site is occipied by only one atomic species. Occupancy is more than 90 percent.
   We read occupancy via pymatgen.Structure.species_and_occu.
3. skiplist.py 
   This spefify skipped files directly. Time-consuming and strange files. 

The number of cif files reduced by the CifFilter as
|   | # of Downloaded Cif | Pymatgen structure | occupancy check | skiplist | list_* | Results    |
|   |                     |              error |         removed |  removed |        |            |
|---+---------------------+--------------------+-----------------+----------+--------+------------|
| N |                 674 |                 12 |             187 |        0 |    475 | list_N.dat |
| F |                1415 |                 19 |             318 |        0 |   1078 | list_F.dat |
| O |               16131 |                610 |            8526 |        3 |   6992 | list_O.dat |

log files are in CifFilter*.log. We can check numbers easily, as 
>grep 'error pymatgen.Structure' CifFilter_O.log |wc   ==>610
>grep skiplist CifFilter_O.log |wc   ==>3
>grep 'skip occupancy' CifFilter_O.log |wc   ==>8526


* Generate AnionPacking figure, Fig.1
>./job_APfig

  This performs anion_radius_histogram.py O,...
  to generate anion-packing figure, Fig.1.
  We will have *.png. Fig for O takes several minutes.
  We can use viewer such as eog.

[[./anion_radius_histogram.py_F.png]]
[[./anion_radius_histogram.py_N.png]]
[[./anion_radius_histogram.py_O.png]]


* Chemenv analysis  
>./job_chemenv_analysis

 This performs ./chemenv_analysis.py N (as well as F and O) successively. 
 Analyzed files are stored into neighbour_*/*.
 This step is time-consuming. 
 It takes ~80 min for N, ~6 hours for F, ~24 hours for O in our laptop.
 (thus it is better to perform N only first).

To do from scratch, remove chem*.log and neghbour_*. 
(inputs are COD/*/*.cif and list*.dat).
When Chemenv cause error, we have sign such as 'error lgf.setup_structure(structure)'
in the console output (grep error chem*.log).

|   | list_* | Chemenv error | total number of cif files | Results in             |
|   |        |               |  for bondlength historgam |                        |
|---+--------+---------------+---------------------------+------------------------|
| N |    475 |             1 |                       474 | ./neighbour_N/*.dat    |
| F |   1078 |             2 |                      1076 | ./neighbour_F/*.dat    |
| O |   6992 |            27 |                      6965 | ./neighbour_O/*.dat    |

For these total number of files, we generate BondLength histograms.
We can check Chemenv error by 'grep error chemO*.log'


* Create BondLength Histogram for Fig.2,3,4 
>./job_histA

 This performs 'bondlength_histogram.py N' and so on.
 PNG files for Fig2-Fig.4 are created.
 It takes ~ 20 minutes.
Chemenv errors are
 error lgf.setup_structure(structure)
 error lgf.compute_structure_environments(maximum_distance_factor=1.41,only_cations=True)

[[./F_alkali.png]]
[[./F_alkali_earth.png]]
[[./F_3d_1.png]]
[[./F_3d_2.png]]
[[./F_4d_1.png]]
[[./F_4d_2.png]]

[[./N_alkali.png]]
[[./N_alkali_earth.png]]
[[./N_3d_1.png]]
[[./N_3d_2.png]]
[[./N_4d_1.png]]
[[./N_4d_2.png]]

[[./O_alkali.png]]
[[./O_alkali_earth.png]]
[[./O_3d_1.png]]
[[./O_3d_2.png]]
[[./O_4d_1.png]]
[[./O_4d_2.png]]

* Create BondLength Histogram for Fig.5 

>./job_histB
  We perform it as "./bondlength_histogram.py O Fe".
  We checked this only for Oxygen. We use BVS module module_valence_bond_analizer_RBVS.py,
  whose core part is supplied by Prof.M.Kanzaki, Institute for Planetary Materials, Okayama University.
  It takes ~4 minutes.
  
[[./O_Cu_valence.png]]
[[./O_V_valence.png]]
[[./O_Fe_valence.png]]
[[./V_BVS.png]]
[[./Cu_BVS.png]]
[[./Fe_BVS.png]]

* Acknowledgement 
Dr.Saulis Grazuils gave us detailed comments and suggestions about 
how to improve our raw proceduces. 
Dr.M.Kanzaki supplied us a base for module_valence_bond_analizer_RBVS.py.
We also like to appreciate Dr.H.Akai for comments.
